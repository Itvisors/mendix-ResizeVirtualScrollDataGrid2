// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testmodule.proxies.microflows;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public final class Microflows
{
	/**
	 * Private constructor to prevent instantiation of this class. 
	 */
	private Microflows() {}

	// These are the microflows for the TestModule module
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Person_DeleteAllBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TestModule.ACT_Person_DeleteAll");
		return builder;
	}

	public static void aCT_Person_DeleteAll(IContext context)
	{
		aCT_Person_DeleteAllBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_PersonImport_ImportFromServiceBuilder(
		randomuserservice.proxies.ContextHelper _contextHelper
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TestModule.ACT_PersonImport_ImportFromService");
		builder = builder.withParam("ContextHelper", _contextHelper);
		return builder;
	}

	public static void aCT_PersonImport_ImportFromService(
		IContext context,
		randomuserservice.proxies.ContextHelper _contextHelper
	)
	{
		aCT_PersonImport_ImportFromServiceBuilder(
				_contextHelper
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_PersonImport_StartBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TestModule.ACT_PersonImport_Start");
		return builder;
	}

	public static void aCT_PersonImport_Start(IContext context)
	{
		aCT_PersonImport_StartBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_Country_GetOrCreateForServiceBuilder(
		java.util.List<testmodule.proxies.Country> _countryList,
		java.lang.String _description
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TestModule.SUB_Country_GetOrCreateForService");
		builder = builder.withParam("CountryList", _countryList);
		builder = builder.withParam("Description", _description);
		return builder;
	}

	public static testmodule.proxies.Country sUB_Country_GetOrCreateForService(
		IContext context,
		java.util.List<testmodule.proxies.Country> _countryList,
		java.lang.String _description
	)
	{
		Object result = sUB_Country_GetOrCreateForServiceBuilder(
				_countryList,
				_description
			)
			.execute(context);
		return result == null ? null : testmodule.proxies.Country.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_Person_CreateFromServiceBuilder(
		randomuserservice.proxies.Result _responseObject,
		java.util.List<testmodule.proxies.Country> _countryList,
		java.util.List<system.proxies.TimeZone> _timeZoneList,
		java.util.List<testmodule.proxies.Person> _personList
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TestModule.SUB_Person_CreateFromService");
		builder = builder.withParam("ResponseObject", _responseObject);
		builder = builder.withParam("CountryList", _countryList);
		builder = builder.withParam("TimeZoneList", _timeZoneList);
		builder = builder.withParam("PersonList", _personList);
		return builder;
	}

	public static void sUB_Person_CreateFromService(
		IContext context,
		randomuserservice.proxies.Result _responseObject,
		java.util.List<testmodule.proxies.Country> _countryList,
		java.util.List<system.proxies.TimeZone> _timeZoneList,
		java.util.List<testmodule.proxies.Person> _personList
	)
	{
		sUB_Person_CreateFromServiceBuilder(
				_responseObject,
				_countryList,
				_timeZoneList,
				_personList
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_Person_DeleteAllBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TestModule.SUB_Person_DeleteAll");
		return builder;
	}

	public static void sUB_Person_DeleteAll(IContext context)
	{
		sUB_Person_DeleteAllBuilder().execute(context);
	}
}
